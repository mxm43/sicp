(define (count-pairs x)
  (let ((visited '()))
    (define (add-visited pair)
      (begin (set! visited (cons pair visited))
             1))
    (define (is-visited? p l)
      (cond ((null? l) #f)
            ((eq? p (car l)) #t)
            (else (is-visited? p (cdr l)))))
    (cond ((not (pair? x)) 0)
          ((is-visited? x visited) 0)
          (else (+ (count-pairs (car x))
                   (count-pairs (cdr x))
                   (add-visited x))))))
