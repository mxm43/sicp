(define (loop? x)
  (let ((visited '()))
    (define (add-visited pair)
      (set! visited (cons pair visited)))
    (define (is-visited? p l)
      (cond ((null? l) #f)
            ((eq? p (car l)) #t)
            (else (is-visited? p (cdr l)))))
    (define (recu p)
      (cond ((null? p) #f)
            ((not (pair? p)) #f)
            ((is-visited? p visited) #t)
            (else (begin (add-visited p)
                         (recu (cdr p))))))
    (recu x)))
