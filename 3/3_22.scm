(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (dispatch m . param)
      (cond ((eq? m 'empty-queue?)
             (null? front-ptr))
            ((eq? m 'front-queue)
             (if (null? front-ptr)
                 (error "FRONT called with an empty queue" front-ptr)
                 front-ptr))
            ((eq? m 'insert-queue!)
             (let ((new-pair (cons (car param) '())))
               (cond ((null? front-ptr)
                      (set! front-ptr new-pair)
                      (set! rear-ptr new-pair)
                      front-ptr)
                     (else
                      (set-cdr! rear-ptr new-pair)
                      (set! rear-ptr new-pair)
                      front-ptr))))
            ((eq? m 'delete-queue!)
             (if (null? front-ptr)
                 (error "DELETE called with an empty queue" front-ptr)
                 (set! front-ptr (cdr front-ptr))))))
    dispatch))

(define (empty-queue? queue) (queue 'empty-queue?))
(define (front-queue queue) (queue 'front-queue))
(define (insert-queue! queue item) (queue 'insert-queue! item))
(define (delete-queue! queue) (queue 'delete-queue!))

